// Generated by gencpp from file apriltags_intrude_detector/apriltags_infoResponse.msg
// DO NOT EDIT!


#ifndef APRILTAGS_INTRUDE_DETECTOR_MESSAGE_APRILTAGS_INFORESPONSE_H
#define APRILTAGS_INTRUDE_DETECTOR_MESSAGE_APRILTAGS_INFORESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Polygon.h>

namespace apriltags_intrude_detector
{
template <class ContainerAllocator>
struct apriltags_infoResponse_
{
  typedef apriltags_infoResponse_<ContainerAllocator> Type;

  apriltags_infoResponse_()
    : polygons()
    , ids()  {
    }
  apriltags_infoResponse_(const ContainerAllocator& _alloc)
    : polygons(_alloc)
    , ids(_alloc)  {
    }



   typedef std::vector< ::geometry_msgs::Polygon_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Polygon_<ContainerAllocator> >::other >  _polygons_type;
  _polygons_type polygons;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _ids_type;
  _ids_type ids;




  typedef boost::shared_ptr< ::apriltags_intrude_detector::apriltags_infoResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::apriltags_intrude_detector::apriltags_infoResponse_<ContainerAllocator> const> ConstPtr;

}; // struct apriltags_infoResponse_

typedef ::apriltags_intrude_detector::apriltags_infoResponse_<std::allocator<void> > apriltags_infoResponse;

typedef boost::shared_ptr< ::apriltags_intrude_detector::apriltags_infoResponse > apriltags_infoResponsePtr;
typedef boost::shared_ptr< ::apriltags_intrude_detector::apriltags_infoResponse const> apriltags_infoResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::apriltags_intrude_detector::apriltags_infoResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::apriltags_intrude_detector::apriltags_infoResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace apriltags_intrude_detector

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/jade/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::apriltags_intrude_detector::apriltags_infoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::apriltags_intrude_detector::apriltags_infoResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::apriltags_intrude_detector::apriltags_infoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::apriltags_intrude_detector::apriltags_infoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::apriltags_intrude_detector::apriltags_infoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::apriltags_intrude_detector::apriltags_infoResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::apriltags_intrude_detector::apriltags_infoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1c6a00f14d4c3b3ffcd440f6c4b8a029";
  }

  static const char* value(const ::apriltags_intrude_detector::apriltags_infoResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1c6a00f14d4c3b3fULL;
  static const uint64_t static_value2 = 0xfcd440f6c4b8a029ULL;
};

template<class ContainerAllocator>
struct DataType< ::apriltags_intrude_detector::apriltags_infoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "apriltags_intrude_detector/apriltags_infoResponse";
  }

  static const char* value(const ::apriltags_intrude_detector::apriltags_infoResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::apriltags_intrude_detector::apriltags_infoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Polygon[] polygons\n\
int8[] ids\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Polygon\n\
#A specification of a polygon where the first and last points are assumed to be connected\n\
Point32[] points\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const ::apriltags_intrude_detector::apriltags_infoResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::apriltags_intrude_detector::apriltags_infoResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.polygons);
      stream.next(m.ids);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct apriltags_infoResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::apriltags_intrude_detector::apriltags_infoResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::apriltags_intrude_detector::apriltags_infoResponse_<ContainerAllocator>& v)
  {
    s << indent << "polygons[]" << std::endl;
    for (size_t i = 0; i < v.polygons.size(); ++i)
    {
      s << indent << "  polygons[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "    ", v.polygons[i]);
    }
    s << indent << "ids[]" << std::endl;
    for (size_t i = 0; i < v.ids.size(); ++i)
    {
      s << indent << "  ids[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.ids[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // APRILTAGS_INTRUDE_DETECTOR_MESSAGE_APRILTAGS_INFORESPONSE_H
